<!doctype html>
<html class="no-js" lang="en">

	<head>
		<meta charset="utf-8">
		<meta name="description" content="">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
		<title>{{ title }}</title>
		<link rel="icon" type="image/png" sizes="16x16" href="{{ assets_url }}/images/favicons/favicon.ico">
		<meta name="theme-color" content="#ffffff">

		{{ wp_head }}

		{# <link rel="stylesheet" href="{{assets_url}}/css/app.css">  #}
		{% block stylesheet %}{% endblock %}
		<script type="text/javascript" src="{{ assets_url }}/misc/jquery/jquery.js"></script>
		<script src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
		<script src="https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.1.1/dist/aframe-extras.min.js"></script>
		<script src="{{assets_url}}/js/mind-ar/mindar-image-aframe.prod.js"></script>
	</head>

	<body>

		<!-- ... the rest of the HTML page ... -->
		{% include '_layout/header.twig' %}

		{% block page %}{% endblock %}
		{% include '_layout/footer.twig' %}

		{% block before_js %}{% endblock %}

		{{ wp_footer }}

		{% if dev == true %}
			<script src="{{assets_url}}/js/app.js"></script>
			<script src="{{assets_url}}/js/runtime.js"></script>
		{% endif %}
		<script type="x-shader/x-fragment" id="test-fragment">
			varying vec2 vUv;
			uniform vec3 color;
			uniform float timeMsec; // A-Frame time in milliseconds.
			
			void main() {
			    float time = timeMsec / 1000.0; // Convert from A-Frame milliseconds to typical time in seconds.
			  // Use sin(time), which curves between 0 and 1 over time,
			  // to determine the mix of two colors:
			  //    (a) Dynamic color where 'R' and 'B' channels come
			  //        from a modulus of the UV coordinates.
			  //    (b) Base color.
			  //
			  // The color itself is a vec4 containing RGBA values 0-1.
			    gl_FragColor = mix(vec4(mod(vUv, 0.05) * 20.0, 1.0, 1.0), vec4(color, 1.0), sin(time));
			}
		</script>
		<script type="x-shader/x-vertex" id="test-vertex">
			// vertex.glsl
						
						varying vec2 vUv;
						
						void main() {
						    vUv = uv;
						    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
						}
		</script>
		<script src="{{assets_url}}/js/vendor.js"></script>
		<script src="{{assets_url}}/js/app.js"></script>
		{{ wp_footer }}
		{% block after_js %}{% endblock %}

	</body>

</html>
